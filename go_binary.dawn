load("//:go_sources.dawn", "go_sources")

target_cache = Cache()
def is_installed(pkg_path):
    return target_cache.once(pkg_path, lambda: os.exists(sh.output("go list -f '{{.Target}}' " + f"'{pkg_path}'").strip()))

def go_binary(name, dir_label, debug=False, gcflags=None, ldflags=None, output=None, docs=None, deps=None, goos=None, goarch=None, disable_cgo=None, additional_sources=[]):
    (suffix, env) = ("", {})
    if goos:
        suffix = f"{suffix}_{goos}"
        env["GOOS"] = goos
    if goarch:
        suffix = f"{suffix}_{goarch}"
        env["GOARCH"] = goarch

    if disable_cgo:
        env["CGO_ENABLED"] = 0

    cmd = "install"
    if output:
        cmd = f"build -o {output}"

    if debug:
        gcflags = f"{gcflags} all=-N -l" if gcflags else "all=-N -l"

    gcflags = f"-gcflags=\"{gcflags}\"" if gcflags else ""
    ldflags = f"-ldflags=\"{ldflags}\"" if ldflags else ""

    pkg_path = path(dir_label)

    sources = go_sources(pkg_path) + (additional_sources if additional_sources else [])

    always = not output and not is_installed(pkg_path)

    generates = [output] if output else None

    @target(name=name.replace("-", "_")+suffix, docs=docs, deps=deps, sources=sources, always=always, generates=generates)
    def binary():
        sh.exec(f"go {cmd} {gcflags} {ldflags} '{pkg_path}'", env=env)

    return binary
